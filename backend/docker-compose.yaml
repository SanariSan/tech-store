version: '3.7'

volumes:
  online-shop-backend-postgres-pgdata:
    external: false
  online-shop-backend-redis-data:
    external: false
  online-shop-front-build-volume:
    external: true
  online-shop-backend-assets-volume:
    external: true

networks:
  inbound:
    name: inbound
    external: true
services:
  online_shop_postgres:
    container_name: online_shop_postgres
    image: sanarisan/online_shop_postgres:1
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./docker/postgres.Dockerfile
      shm_size: 512mb
    shm_size: 512mb
    stop_signal: SIGINT
    stop_grace_period: 60s
    environment:
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'
      POSTGRES_DB: '${DB_DATABASE_NAME}'
      NETWORK_ACCESS: 'internal'
    networks:
      - default
    volumes:
      - online-shop-backend-postgres-pgdata:/var/lib/postgresql/data:rw
    expose:
      - '${DB_PORT}'
    # ports:
    #   - '${DB_PORT}:5432'
    command: ['postgres', '-c', 'log_statement=all']
  online_shop_redis:
    container_name: online_shop_redis
    image: redis:7.0.5-alpine
    restart: unless-stopped
    stop_signal: SIGINT
    stop_grace_period: 60s
    environment:
      NETWORK_ACCESS: 'internal'
    #   - REDIS_DISABLE_COMMANDS=FLUSHALL,MIGRATE,RESTORE,SORT,KEYS,CLIENT,DEBUG,INFO,CONFIG,SAVE,REPLICAOF,MONITOR,ACL,SHUTDOWN
    networks:
      - default
    volumes:
      - online-shop-backend-redis-data:/data:rw
    expose:
      - '${CACHE_PORT}'
    # ports:
    #   - '${CACHE_PORT}:6379'
    command:
      # docs: https://raw.githubusercontent.com/redis/redis/7.0/redis.conf
      [
        'redis-server',

        '--requirepass',
        '${CACHE_PASSWORD}',

        '--loglevel',
        'warning',
        # '--logfile',
        # 'redis.log',

        '--save',
        '20 1',
        '--appendonly',
        'yes',
        '--auto-aof-rewrite-percentage',
        '100',
        '--auto-aof-rewrite-min-size',
        '64mb',
        '--aof-load-truncated',
        'yes',
        '--aof-use-rdb-preamble',
        'yes',
        '--appendfsync',
        'everysec',
        '--appendfilename',
        'appendonly.aof',
        '--appenddirname',
        'appendonlydir',

        '--maxmemory',
        '512mb',
        '--maxmemory-policy',
        'allkeys-lru',
        '--lazyfree-lazy-eviction',
        'yes',
        '--lazyfree-lazy-expire',
        'yes',
        '--lazyfree-lazy-server-del',
        'no',
        '--replica-lazy-flush',
        'no',

        '--slowlog-log-slower-than',
        '1000000',
        '--slowlog-max-len',
        '128',
        '--busy-reply-threshold',
        '5000',
        '--shutdown-timeout',
        '60',

        '--io-threads',
        '1',
        '--io-threads-do-reads',
        'no',
      ]
  online_shop_server:
    container_name: online_shop_server
    image: sanarisan/online_shop_server:1
    restart: unless-stopped
    build:
      context: ./
      dockerfile: ./docker/app.Dockerfile
    stop_signal: SIGINT
    stop_grace_period: 60s
    networks:
      - default
    depends_on:
      - online_shop_postgres
      - online_shop_redis
    expose:
      - '${PORT}'
    # ports:
    #   - '${PORT}:3000'
    env_file:
      - .env
    environment:
      CORS_URL: '${CORS_URL}'
      API_VERSION: '${API_VERSION}'
      DB_USER: '${DB_USER}'
      DB_PASSWORD: '${DB_PASSWORD}'
      COOKIE_SECRET: '${COOKIE_SECRET}'
      CACHE_PASSWORD: '${CACHE_PASSWORD}'
      DEV_TAG: '${DEV_TAG}'
      NETWORK_ACCESS: 'internal'
    # this may introduce race condition, be aware
    # deploy:
    #   mode: replicated
    #   replicas: 2
  online_shop_nginx:
    container_name: online_shop_nginx
    image: sanarisan/online_shop_nginx:1
    restart: unless-stopped
    build:
      context: './'
      dockerfile: './docker/nginx.Dockerfile'
      args:
        STATIC_PATH: '${STATIC_PATH}'
    networks:
      - default
      - inbound
    depends_on:
      - online_shop_postgres
    volumes:
      - type: volume
        source: online-shop-front-build-volume
        target: '${STATIC_PATH}/online-shop'
      - type: volume
        source: online-shop-backend-assets-volume
        target: '${STATIC_PATH}/assets'
    environment:
      VIRTUAL_HOST: '${VIRTUAL_HOST}'
      LETSENCRYPT_HOST: '${LETSENCRYPT_HOST}'
      STATIC_PATH: '${STATIC_PATH}'
    expose:
      - '80'
    # ports:
    #   - '80:80'
